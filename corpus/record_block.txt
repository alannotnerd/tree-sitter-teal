
==============================
Empty record
==============================

local type foo = record
end

---

(program
  (type_declaration
    (type_name)
    (anon_record
      (record_body))))

==============================
Empty record (shorthand)
==============================

local record foo
end

---

(program
  (record_declaration
    name: (identifier)
    (record_body)))

==============================
Record with stuff
==============================

local type foo = record
   bar: {number}
   baz: string
end

---

(program
  (type_declaration
    (type_name)
    (anon_record
      (record_body
        (record_entry
          key: (identifier)
          type: (table_type
                  value_type: (simple_type)))
        (record_entry
          key: (identifier)
          type: (simple_type))))))

==============================
Arrayrecord with stuff
==============================

local type foo = record
   {thread}
   bar: {number}
   baz: string
end

---

(program
  (type_declaration
    (type_name)
    (anon_record
      (record_body
        (record_array_type (simple_type))
        (record_entry
          key: (identifier)
          type: (table_type
                  value_type: (simple_type)))
        (record_entry
          key: (identifier)
          type: (simple_type))))))

==============================
Nested records
==============================

local type foo = record
   type bar = record
      x: number
   end
   baz: bar
end

---

(program
  (type_declaration
    (type_name)
      (anon_record
        (record_body
          (record_entry
            key: (identifier)
            value: (anon_record
                     (record_body
                       (record_entry
                         key: (identifier)
                         type: (simple_type)))))
          (record_entry
            key: (identifier)
            type: (simple_type))))))

==============================
Generic record
==============================

local type foo = record<T>
   foo: T
end

---

(program
  (type_declaration
    (type_name)
    (anon_record
      (typeargs (identifier))
      (record_body
        (record_entry
          key: (identifier)
          type: (simple_type))))))

==============================
Record with a 'type' entry
==============================

local type foo = record
   type: number
end

---

(program
  (type_declaration
    (type_name)
    (anon_record
      (record_body
        (record_entry
          key: (identifier)
          type: (simple_type))))))

==============================
Record with a 'type' entry and types
==============================

local type foo = record
   type: number
   type bar = record
   end
   type baz = enum
      "foo" "bar"
   end
end

---

(program
  (type_declaration
    (type_name)
    (anon_record
      (record_body
        (record_entry
          key: (identifier)
          type: (simple_type))
        (record_entry
          key: (identifier)
          value: (anon_record (record_body)))
        (record_entry
          key: (identifier)
          value: (enum_body
                   (string) (string)))))))

==============================
Nested record shorthand syntax
==============================

local record Foo
   record Bar
   end
end

---

(program
  (record_declaration
    name: (identifier)
    (record_body
      (record_entry
        key: (identifier)
        value: (record_body)))))

==============================
Nested enum shorthand syntax
==============================

local record Foo
   enum Bar
    "foo" "bar"
   end
end

---

(program
  (record_declaration
    name: (identifier)
    (record_body
      (record_entry
        key: (identifier)
        value: (enum_body
                 (string) (string))))))

==============================
Record with a 'record' entry
==============================

local record Foo
   record: number
end

---

(program
  (record_declaration
    name: (identifier)
    (record_body
      (record_entry
        key: (identifier)
        type: (simple_type)))))

==============================
Record with a 'enum' entry
==============================

local record Foo
   enum: number
end

---

(program
  (record_declaration
    name: (identifier)
    (record_body
      (record_entry
        key: (identifier)
        type: (simple_type)))))

==============================
Record with ['entry']
==============================

local record Foo
   ["things"]: number
end

---

(program
  (record_declaration
    name: (identifier)
    (record_body
      (record_entry
        string_key: (string)
        type: (simple_type)))))

==============================
Nested generic record shorthand
==============================

local record Foo
   record Bar<T>
   end
end

---

(program
  (record_declaration
    name: (identifier)
    (record_body
      (record_entry
        key: (identifier)
        typeargs: (typeargs (identifier))
        value: (record_body)))))

==============================
Userdata record
==============================

local record Foo
   userdata
end

---

(program
  (record_declaration
    name: (identifier)
    (record_body (userdata))))

==============================
Record with metamethod
==============================

local record Foo
   metamethod __call: number
end

---

(program
  (record_declaration
    name: (identifier)
    (record_body
      (metamethod
        name: (identifier)
        type: (simple_type)))))
