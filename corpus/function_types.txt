==============================
No args, no returns
==============================

local foo: function()

---

(program
  (var_declaration (var name: (identifier)) type_annotation: (type_annotation (function_type arguments: (arguments)))))

==============================
One arg, no returns
==============================

local foo: function(string)

---

(program
  (var_declaration (var name: (identifier))
    type_annotation: (type_annotation (function_type
      arguments: (arguments
       (arg type: (simple_type)))))))

==============================
No args, one return
==============================

local foo: function(): string

---

(program
  (var_declaration (var name: (identifier))
    type_annotation: (type_annotation (function_type
      arguments: (arguments)
      return_type: (return_type (simple_type))))))

==============================
One arg, one return
==============================

local foo: function(number): string

---

(program
  (var_declaration (var name: (identifier))
    type_annotation: (type_annotation (function_type
      arguments: (arguments
        (arg type: (simple_type)))
      return_type: (return_type (simple_type))))))

==============================
Multiple args, no return
==============================

local foo: function(number, {string}, string)

---

(program
  (var_declaration (var name: (identifier))
    type_annotation: (type_annotation (function_type
      arguments: (arguments
        (arg type: (simple_type))
        (arg type: (table_type
            value_type: (simple_type)))
        (arg type: (simple_type)))))))

==============================
No args, multiple returns
==============================

local foo: function(): string, {number}, number, thread

---

(program
  (var_declaration (var name: (identifier))
    type_annotation: (type_annotation (function_type
      arguments: (arguments)
      return_type: (return_type
        (simple_type)
        (table_type
          value_type: (simple_type))
        (simple_type)
        (simple_type))))))

==============================
Multiple args, multiple returns
==============================

local foo: function(number, {string}, string): string, {number}, number, thread

---

(program
  (var_declaration (var name: (identifier))
    type_annotation: (type_annotation (function_type
      arguments: (arguments
        (arg type: (simple_type))
        (arg type: (table_type
          value_type: (simple_type)))
        (arg type: (simple_type)))
      return_type: (return_type
        (simple_type)
        (table_type
          value_type: (simple_type))
        (simple_type)
        (simple_type))))))

==============================
Named argument
==============================

local foo: function(bar: number)

---

(program
  (var_declaration (var name: (identifier))
    type_annotation: (type_annotation
      (function_type
        arguments: (arguments
          (arg name: (identifier) type: (simple_type)))))))

==============================
Named arguments
==============================

local foo: function(bar: number, baz: {string})

---

(program
  (var_declaration (var name: (identifier))
    type_annotation: (type_annotation (function_type
      arguments: (arguments
        (arg name: (identifier) type: (simple_type))
        (arg name: (identifier) type: (table_type value_type: (simple_type))))))))

==============================
Variadic args
==============================

local foo: function(...: string)

---

(program
  (var_declaration (var name: (identifier))
    type_annotation: (type_annotation (function_type
      arguments: (arguments
        (varargs type: (simple_type)))))))

==============================
Args + variadic last arg
==============================

local foo: function(number, string, ...: string)

---

(program
  (var_declaration (var name: (identifier))
    type_annotation: (type_annotation (function_type
      arguments: (arguments
        (arg type: (simple_type))
        (arg type: (simple_type))
        (varargs type: (simple_type)))))))

==============================
Variadic return
==============================

local foo: function(): string...

---

(program
  (var_declaration (var name: (identifier))
    type_annotation: (type_annotation (function_type
      arguments: (arguments)
      return_type: (return_type (variadic_type (simple_type)))))))

